/**
 * AUDITORIA
 * # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import Audit from './model/Audit';
import Compliance from './model/Compliance';
import Details from './model/Details';
import InspectionGetInspection from './model/InspectionGetInspection';
import InspectionSubmit from './model/InspectionSubmit';
import InspectionSubmitRequest from './model/InspectionSubmitRequest';
import Picture from './model/Picture';
import Picture1 from './model/Picture1';
import Problems from './model/Problems';
import Protocol from './model/Protocol';
import MiscApi from './api/MiscApi';

/**
* _IntroducoSeja_bem_vindo_a_documentao_da_API_do__SCANVIN_httpsscanvin_com_br_para_auditorias___Nossa_API_foi_criada_utilizando_o_padro__REST_httpsrestfulapi_net_e__HATEOAS_httpsrestfulapi_nethateoas_possibilitando_a_integrao_de_seu_sistema_ao_nosso_e_est_documentada_abaixo__Como_usar_a_APILogo_a_seguir_voc_encontrar_todos_os_recursos_e_mtodos_suportados_pela_API_sendo_que_essa_pgina_possibilita_que_voc_teste_os_recursos_e_mtodos_diretamente_atravs_dela__AutenticaoVoc_precisa_de_uma__API_KEY_httpsen_wikipedia_orgwikiApplication_programming_interface_keyHTTP_APIs_para_identificar_a_conta_que_est_realizando_solicitaes_para_a_API__Voc_pode_obter_seu_token_de_autenticao_no_seu__Painel_do_Cliente_httpsauditoria_scanvin_com_brclient__Insira_seu_token_no_campo_que_se_encontra_topo_desta_pgina_para_testar_os_mtodos_da_API__WebhookVoc_tambm_deve_configurar_seu__Webhook_httpsen_wikipedia_orgwikiWebhook_no__Painel_do_Cliente_httpsauditoria_scanvin_com_brclientwebhook__Quando_os_resultados_da_auditoria_estiverem_disponveis_uma_notificao_ser_enviada_para_a_URL_informada_via__HTTP_POST_httpsen_wikipedia_orgwikiPOST__HTTP__A_notificao_possui_Content_type_do_tipo_applicationjson__O__JSON_httpsen_wikipedia_orgwikiJSON_postado_contm_um_nico_campo_notification_id_que_contm_o_identificador_nico_do_evento_que_gerou_a_notificao__Deve_se_ento_chamar_o_endpoint_Inspection___Get_Inspection_informando_esse_mesmo_identificador_nico_para_recuperar_os_dados_da_vistoria_e_da_auditoria_realizada_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Auditoria = require('index'); // See note below*.
* var xxxSvc = new Auditoria.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Auditoria.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Auditoria.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Auditoria.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Audit model constructor.
     * @property {module:model/Audit}
     */
    Audit,

    /**
     * The Compliance model constructor.
     * @property {module:model/Compliance}
     */
    Compliance,

    /**
     * The Details model constructor.
     * @property {module:model/Details}
     */
    Details,

    /**
     * The InspectionGetInspection model constructor.
     * @property {module:model/InspectionGetInspection}
     */
    InspectionGetInspection,

    /**
     * The InspectionSubmit model constructor.
     * @property {module:model/InspectionSubmit}
     */
    InspectionSubmit,

    /**
     * The InspectionSubmitRequest model constructor.
     * @property {module:model/InspectionSubmitRequest}
     */
    InspectionSubmitRequest,

    /**
     * The Picture model constructor.
     * @property {module:model/Picture}
     */
    Picture,

    /**
     * The Picture1 model constructor.
     * @property {module:model/Picture1}
     */
    Picture1,

    /**
     * The Problems model constructor.
     * @property {module:model/Problems}
     */
    Problems,

    /**
     * The Protocol model constructor.
     * @property {module:model/Protocol}
     */
    Protocol,

    /**
    * The MiscApi service constructor.
    * @property {module:api/MiscApi}
    */
    MiscApi
};
