/**
 * AUDITORIA
 * # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import InspectionGetInspection from '../model/InspectionGetInspection';
import InspectionSubmit from '../model/InspectionSubmit';
import InspectionSubmitRequest from '../model/InspectionSubmitRequest';

/**
* Misc service.
* @module api/MiscApi
* @version 1.0
*/
export default class MiscApi {

    /**
    * Constructs a new MiscApi. 
    * @alias module:api/MiscApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the inspectionGetInspection operation.
     * @callback module:api/MiscApi~inspectionGetInspectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InspectionGetInspection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspection - Get Inspection
     * Recupera as informações da vistoria e o resultado da auditoria, se estiver disponível.
     * @param {module:api/MiscApi~inspectionGetInspectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InspectionGetInspection}
     */
    inspectionGetInspection(notificationId, callback) {
      let postBody = null;

      let pathParams = {
        'notification_id': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Api-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InspectionGetInspection;

      return this.apiClient.callApi(
        '/{notification_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the inspectionPictureTypes operation.
     * @callback module:api/MiscApi~inspectionPictureTypesCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspection - Picture Types
     * Utilize este endpoint para obter a lista de códigos para os tipos de imagem que devem ser utilizados ao realizar chamadas ao endpoint &#x60;&#x60;&#x60;Inspection - Submit&#x60;&#x60;&#x60;.
     * @param {module:api/MiscApi~inspectionPictureTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    inspectionPictureTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Api-Key'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/picture-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the inspectionSubmit operation.
     * @callback module:api/MiscApi~inspectionSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InspectionSubmit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspection - Submit
     * Utilize este endpoint para enviar uma vistoria para auditoria. As vistorias são colocadas em uma fila e distribuídas aleatoriamente entre os auditores, e são processadas na ordem de chegada. Para receber uma notificação assim que a auditoria for realizada, configure o webhook no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Alternativamente, caso prefira especificar um webhook customizado para cada vistoria, informe o parâmetro &#x60;&#x60;&#x60;postback_url&#x60;&#x60;&#x60;.
     * @param {module:api/MiscApi~inspectionSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InspectionSubmit}
     */
    inspectionSubmit(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Api-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InspectionSubmit;

      return this.apiClient.callApi(
        '/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
