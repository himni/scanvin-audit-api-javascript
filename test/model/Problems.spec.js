/**
 * AUDITORIA
 * # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Auditoria);
  }
}(this, function(expect, Auditoria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Auditoria.Problems();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Problems', function() {
    it('should create an instance of Problems', function() {
      // uncomment below and update the code to test Problems
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be.a(Auditoria.Problems);
    });

    it('should have the property extinguisher (base name: "extinguisher")', function() {
      // uncomment below and update the code to test the property extinguisher
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property hodometer (base name: "hodometer")', function() {
      // uncomment below and update the code to test the property hodometer
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property seal (base name: "seal")', function() {
      // uncomment below and update the code to test the property seal
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property flAlert (base name: "fl_alert")', function() {
      // uncomment below and update the code to test the property flAlert
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property frAlert (base name: "fr_alert")', function() {
      // uncomment below and update the code to test the property frAlert
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property rlAlert (base name: "rl_alert")', function() {
      // uncomment below and update the code to test the property rlAlert
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property rrAlert (base name: "rr_alert")', function() {
      // uncomment below and update the code to test the property rrAlert
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property flHeadlight (base name: "fl_headlight")', function() {
      // uncomment below and update the code to test the property flHeadlight
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property frHeadlight (base name: "fr_headlight")', function() {
      // uncomment below and update the code to test the property frHeadlight
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property rlHeadlight (base name: "rl_headlight")', function() {
      // uncomment below and update the code to test the property rlHeadlight
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

    it('should have the property rrHeadlight (base name: "rr_headlight")', function() {
      // uncomment below and update the code to test the property rrHeadlight
      //var instane = new Auditoria.Problems();
      //expect(instance).to.be();
    });

  });

}));
